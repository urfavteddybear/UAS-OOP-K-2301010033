/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package uasoop;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wahyu
 */
public class frmTransaksi extends javax.swing.JFrame {

    Connection koneksi;
    DefaultTableModel model;
    NumberFormat currencyFormat;
    SimpleDateFormat dateFormat;
    double totalHarga = 0;

    /**
     * Creates new form frmTransaksi
     */
    public frmTransaksi() {
        initComponents();
        
        try {
            koneksi = uasoop.dbkoneksi.koneksi();
              model = new DefaultTableModel();
            model.addColumn("ID Barang");
            model.addColumn("Nama Barang");
            model.addColumn("Harga Sewa");
            model.addColumn("Jumlah");
            model.addColumn("Subtotal");
            tblBarangSewa.setModel(model);
            
            currencyFormat = NumberFormat.getCurrencyInstance(new Locale("id", "ID"));
            dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            
            // Set custom renderer for currency columns
            javax.swing.table.DefaultTableCellRenderer currencyRenderer = new javax.swing.table.DefaultTableCellRenderer() {
                @Override
                public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    if (value instanceof Number) {
                        setText(currencyFormat.format(((Number) value).doubleValue()));
                    }
                    return this;
                }
            };
            tblBarangSewa.getColumnModel().getColumn(2).setCellRenderer(currencyRenderer); // Harga Sewa
            tblBarangSewa.getColumnModel().getColumn(4).setCellRenderer(currencyRenderer); // Subtotal
            
            loadPelanggan();
            loadBarang();
            setDefaultDates();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }
    
    private void loadPelanggan() throws Exception {
        cbPelanggan.removeAllItems();
        cbPelanggan.addItem("-- Pilih Pelanggan --");
          PreparedStatement ps = koneksi.prepareStatement("SELECT id_pelanggan, nama_pelanggan FROM pelanggan ORDER BY nama_pelanggan");
        ResultSet rs = ps.executeQuery();
        
        while (rs.next()) {
            cbPelanggan.addItem(rs.getInt("id_pelanggan") + " - " + rs.getString("nama_pelanggan"));
        }
    }
    
    private void loadBarang() throws Exception {
        cbBarang.removeAllItems();
        cbBarang.addItem("-- Pilih Barang --");
        
        PreparedStatement ps = koneksi.prepareStatement("SELECT id_barang, nama_barang, harga_sewa, stok FROM barang WHERE stok > 0 ORDER BY nama_barang");
        ResultSet rs = ps.executeQuery();
        
        while (rs.next()) {
            cbBarang.addItem(rs.getInt("id_barang") + " - " + rs.getString("nama_barang") + " (Stok: " + rs.getInt("stok") + ") - " + currencyFormat.format(rs.getDouble("harga_sewa")));
        }
    }
    
    private void setDefaultDates() {
        Date today = new Date();
        dateTanggalSewa.setText(dateFormat.format(today));
        
        // Default 3 days rental
        Date returnDate = new Date(today.getTime() + (3 * 24 * 60 * 60 * 1000));
        dateTanggalKembali.setText(dateFormat.format(returnDate));
        txDurasi.setText("3");
    }    private void calculateTotal() {
        totalHarga = 0;
        for (int i = 0; i < model.getRowCount(); i++) {
            Object subtotalObj = model.getValueAt(i, 4);
            if (subtotalObj instanceof Number) {
                totalHarga += ((Number) subtotalObj).doubleValue();
            }
        }
        lblTotal.setText(currencyFormat.format(totalHarga));
    }
    
    private void clearTable() {
        model.setRowCount(0);
        totalHarga = 0;
        lblTotal.setText(currencyFormat.format(0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cbPelanggan = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        dateTanggalSewa = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dateTanggalKembali = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txDurasi = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cbBarang = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        spnJumlah = new javax.swing.JSpinner();
        btnTambahBarang = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBarangSewa = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        btnSimpan = new javax.swing.JButton();
        btnBatal = new javax.swing.JButton();
        btnTutup = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Transaksi Sewa Kamera");

        jLabel1.setText("Pelanggan:");

        jLabel2.setText("Tanggal Sewa:");

        jLabel3.setText("Tanggal Kembali:");

        jLabel4.setText("Durasi (hari):");

        jLabel5.setText("Barang:");

        jLabel6.setText("Jumlah:");

        spnJumlah.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        btnTambahBarang.setText("Tambah Barang");
        btnTambahBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahBarangActionPerformed(evt);
            }
        });

        tblBarangSewa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nama Barang", "Harga", "Jumlah", "Subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblBarangSewa);

        jLabel7.setText("Total:");

        lblTotal.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTotal.setText("Rp 0");

        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnBatal.setText("Batal");
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        btnTutup.setText("Tutup");
        btnTutup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTutupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbPelanggan, 0, 200, Short.MAX_VALUE)
                            .addComponent(dateTanggalSewa)
                            .addComponent(dateTanggalKembali)
                            .addComponent(txDurasi)
                            .addComponent(cbBarang, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(spnJumlah, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(btnTambahBarang))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(20, 20, 20)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSimpan)
                        .addGap(18, 18, 18)
                        .addComponent(btnBatal)
                        .addGap(18, 18, 18)
                        .addComponent(btnTutup)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel8)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbPelanggan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dateTanggalSewa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dateTanggalKembali, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txDurasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbBarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(spnJumlah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTambahBarang))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lblTotal))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSimpan)
                    .addComponent(btnBatal)
                    .addComponent(btnTutup))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahBarangActionPerformed
        if (cbBarang.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Pilih barang terlebih dahulu!");
            return;
        }

        String selectedBarang = cbBarang.getSelectedItem().toString();
        String[] parts = selectedBarang.split(" - ");
        int idBarang = Integer.parseInt(parts[0]);
        String namaBarang = parts[1].split(" \\(")[0];
        
        // Get price from selected item
        String priceStr = parts[2];
        double hargaSewa = 0;
        try {
            // Remove currency formatting
            priceStr = priceStr.replaceAll("[^0-9,]", "").replace(",", ".");
            hargaSewa = Double.parseDouble(priceStr);
        } catch (Exception e) {
            // Fallback: get from database
            try {
                PreparedStatement ps = koneksi.prepareStatement("SELECT harga_sewa FROM barang WHERE id_barang = ?");
                ps.setInt(1, idBarang);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    hargaSewa = rs.getDouble("harga_sewa");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error mengambil harga: " + ex.getMessage());
                return;
            }
        }

        int jumlah = (Integer) spnJumlah.getValue();
        int durasi = Integer.parseInt(txDurasi.getText());
        double subtotal = hargaSewa * jumlah * durasi;

        // Check if item already exists in table
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).toString().equals(String.valueOf(idBarang))) {
                JOptionPane.showMessageDialog(this, "Barang sudah ada dalam daftar sewa!");
                return;
            }
        }        // Add to table - store raw numbers for calculation, but display formatted
        Object[] row = {idBarang, namaBarang, hargaSewa, jumlah, subtotal};
        model.addRow(row);
        
        calculateTotal();
        
        // Reset spinner
        spnJumlah.setValue(1);
        cbBarang.setSelectedIndex(0);
    }//GEN-LAST:event_btnTambahBarangActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        if (cbPelanggan.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Pilih pelanggan terlebih dahulu!");
            return;
        }
        
        if (dateTanggalSewa.getText().isEmpty() || dateTanggalKembali.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tanggal sewa dan kembali harus diisi!");
            return;
        }
        
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Tambahkan barang terlebih dahulu!");
            return;
        }

        try {
            koneksi.setAutoCommit(false);
            
            // Ambil ID pelanggan
            String selectedPelanggan = cbPelanggan.getSelectedItem().toString();
            int idPelanggan = Integer.parseInt(selectedPelanggan.split(" - ")[0]);
            
            // Insert transaksi
            PreparedStatement ps1 = koneksi.prepareStatement(
                    "INSERT INTO transaksi (id_pelanggan, tanggal_sewa, tanggal_kembali, durasi, total_harga, id_user) VALUES (?, ?, ?, ?, ?, ?)",
                    Statement.RETURN_GENERATED_KEYS);
            ps1.setInt(1, idPelanggan);
            ps1.setString(2, dateTanggalSewa.getText());
            ps1.setString(3, dateTanggalKembali.getText());
            ps1.setInt(4, Integer.parseInt(txDurasi.getText()));
            ps1.setDouble(5, totalHarga);
            ps1.setInt(6, SessionUser.userId);
            ps1.executeUpdate();
            
            ResultSet generatedKeys = ps1.getGeneratedKeys();
            int idTransaksi = 0;
            if (generatedKeys.next()) {
                idTransaksi = generatedKeys.getInt(1);
            }
            
            // Insert detail transaksi dan update stok
            for (int i = 0; i < model.getRowCount(); i++) {
                int idBarang = Integer.parseInt(model.getValueAt(i, 0).toString());
                int jumlah = Integer.parseInt(model.getValueAt(i, 3).toString());
                
                // Get harga_sewa from database
                PreparedStatement psHarga = koneksi.prepareStatement("SELECT harga_sewa FROM barang WHERE id_barang = ?");
                psHarga.setInt(1, idBarang);
                ResultSet rsHarga = psHarga.executeQuery();
                double hargaSatuan = 0;
                if (rsHarga.next()) {
                    hargaSatuan = rsHarga.getDouble("harga_sewa");
                }
                
                // Calculate subtotal
                int durasi = Integer.parseInt(txDurasi.getText());
                double subtotal = hargaSatuan * jumlah * durasi;
                
                // Insert detail
                PreparedStatement ps2 = koneksi.prepareStatement(
                        "INSERT INTO detail_transaksi (id_transaksi, id_barang, jumlah, harga_satuan, subtotal) VALUES (?, ?, ?, ?, ?)");
                ps2.setInt(1, idTransaksi);
                ps2.setInt(2, idBarang);
                ps2.setInt(3, jumlah);
                ps2.setDouble(4, hargaSatuan);
                ps2.setDouble(5, subtotal);
                ps2.executeUpdate();
                
                // Update stok
                PreparedStatement ps3 = koneksi.prepareStatement("UPDATE barang SET stok = stok - ? WHERE id_barang = ?");
                ps3.setInt(1, jumlah);
                ps3.setInt(2, idBarang);
                ps3.executeUpdate();
            }
            
            koneksi.commit();
            koneksi.setAutoCommit(true);
            
            JOptionPane.showMessageDialog(this, "Transaksi berhasil disimpan!");
            
            // Reset form
            cbPelanggan.setSelectedIndex(0);
            clearTable();
            setDefaultDates();
            
        } catch (Exception e) {
            try {
                koneksi.rollback();
                koneksi.setAutoCommit(true);
            } catch (Exception ex) {}
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        cbPelanggan.setSelectedIndex(0);
        clearTable();
        setDefaultDates();
    }//GEN-LAST:event_btnBatalActionPerformed

    private void btnTutupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTutupActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnTutupActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new frmTransaksi().setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnTambahBarang;
    private javax.swing.JButton btnTutup;
    private javax.swing.JComboBox<String> cbBarang;
    private javax.swing.JComboBox<String> cbPelanggan;
    private javax.swing.JTextField dateTanggalKembali;
    private javax.swing.JTextField dateTanggalSewa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JSpinner spnJumlah;
    private javax.swing.JTable tblBarangSewa;
    private javax.swing.JTextField txDurasi;
    // End of variables declaration//GEN-END:variables
}
